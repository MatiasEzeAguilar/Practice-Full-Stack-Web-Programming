// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("AuthorSeries", b =>
                {
                    b.Property<int>("AuthorIdAuthor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeriesIdSeries")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorIdAuthor", "SeriesIdSeries");

                    b.HasIndex("SeriesIdSeries");

                    b.ToTable("AuthorSeries");
                });

            modelBuilder.Entity("Backend.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdAuthor");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Backend.Models.Character", b =>
                {
                    b.Property<int>("IdCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CharName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("CharSummary")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("IdCharacter");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Backend.Models.Producer", b =>
                {
                    b.Property<int>("IdProducer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Foundation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("IdProducer");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("Backend.Models.Series", b =>
                {
                    b.Property<int>("IdSeries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Launch")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeriesSummary")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.HasKey("IdSeries");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("CharacterSeries", b =>
                {
                    b.Property<int>("CharactersIdCharacter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeriesIdSeries")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharactersIdCharacter", "SeriesIdSeries");

                    b.HasIndex("SeriesIdSeries");

                    b.ToTable("CharacterSeries");
                });

            modelBuilder.Entity("ProducerSeries", b =>
                {
                    b.Property<int>("ProducerIdProducer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeriesIdSeries")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProducerIdProducer", "SeriesIdSeries");

                    b.HasIndex("SeriesIdSeries");

                    b.ToTable("ProducerSeries");
                });

            modelBuilder.Entity("AuthorSeries", b =>
                {
                    b.HasOne("Backend.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorIdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesIdSeries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSeries", b =>
                {
                    b.HasOne("Backend.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersIdCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesIdSeries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProducerSeries", b =>
                {
                    b.HasOne("Backend.Models.Producer", null)
                        .WithMany()
                        .HasForeignKey("ProducerIdProducer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesIdSeries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
